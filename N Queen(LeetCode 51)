//GFG
class Solution {
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int[][] board= new int[n][n];
        solve(0,n,board,ans);
        return ans;
    }
    private void solve(int row,int n,int[][] board,ArrayList<ArrayList<Integer>> ans){
        if(row==n){
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(board[i][j]==1){
                        temp.add(j+1);
                    }
                }
            }
            ans.add(temp);
            return;
        }
        
        for(int col=0;col<n;col++){
            if(isSafe(board,row,col,n)){
                board[row][col]=1;
                solve(row+1,n,board,ans);
                board[row][col]=0;
            }
        }
    }
    
    private boolean isSafe(int[][] board,int row,int col,int n){
        
        for(int i=row-1;i>=0;i--){
            if(board[i][col]==1) return false;
        }
        
        for(int i=row-1,j=col-1 ;i>=0 && j>=0 ;i--,j--){
             if(board[i][j]==1) return false;
        }
        
        for(int i=row-1,j=col+1;i>=0 && j<n;i--,j++){
             if(board[i][j]==1) return false;
        }
        return true;
    }
}

//LeetCode
class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
        
        solve(0, board, res, n);
        return res;
    }

    private void solve(int row, char[][] board, List<List<String>> res, int n) {
        if (row == n) {
            res.add(construct(board));
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col, n)) {
                board[row][col] = 'Q';
                solve(row + 1, board, res, n);
                board[row][col] = '.'; 
            }
        }
    }

    private boolean isSafe(char[][] board, int row, int col, int n) {
       
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q')
                return false;
        }

       
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q')
                return false;
        }

      
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q')
                return false;
        }

        return true;
    }

    private List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            res.add(new String(board[i]));
        }
        return res;
    }
}
