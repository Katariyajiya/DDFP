class Solution {
    
    boolean[][] row = new boolean[9][10];
    boolean[][] col= new boolean[9][10];
    boolean[][] box = new boolean[9][10];
    
    
    public void display(int[][] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }
    public void solveSudoku(int[][] mat) {
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                int num = mat[i][j];
                if(num!=0){
                    row[i][num] = true;
                    col[j][num]=true;
                    box[boxIndex(i,j)][num]=true;
                }
            }
        }
        solve(mat,0,0);
    
       
    }
    public boolean solve(int[][] mat,int i,int j ) {
       if(i==mat.length){
           return true;
       }
       
       int ni=0;
       int nj=0;
       
       if(j==mat[0].length-1){
           ni=i+1;
           nj=0;
       }else{
           ni=i;
           nj=j+1;
       }
       
       if(mat[i][j] != 0){
           return solve(mat,ni,nj);
       }else{
           for(int num=1;num<=9;num++){
               
               int b=boxIndex(i,j);
               
               if(!row[i][num] && !col[j][num] && !box[b][num]){
                   mat[i][j]=num;
                   row[i][num]=col[j][num]=box[b][num]=true;
                   
                   if(solve(mat,ni,nj)) return true;
                   mat[i][j]=0;
                    row[i][num]=col[j][num]=box[b][num]=false;
               }
           }
       }
       return false;
    }
    private int boxIndex(int i,int j){
        return (i/3)*3+(j/3);
    }
    // public static boolean isValid(int[][] board,int x,int y,int val){
    //      for(int j=0;j<9;j++){
    //          if(board[x][j]==val) return false;
    //      }
         
    //      for(int i=0;i<9;i++){
    //          if(board[i][y]==val) return false;
    //      }
         
    //      int smi=(x/3)*3;
    //      int smj=(y/3)*3;
         
    //      for(int i=0;i<3;i++){
    //          for(int j=0;j<3;j++){
    //              if(board[smi+i][smj+j]==val) return false;
    //          }
    //      }
    //   return true;
    // }
}
